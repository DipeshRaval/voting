name: Auto test Online Voting Application
on:
  push:
    branches:
      - develop
      - main
    pull_request: # Trigger the workflow on pull requests targeting the specified branches
      branches:
        - develop

env:
  PG_DATABASE: wd-voting-test
  PG_USER: postgres
  PG_PASSWORD: Drvl@123

jobs:
  # Label of the container job
  run-tests:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:11.7
        # Provide the password for postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: Drvl@123
          POSTGRES_DB: wd-voting-test
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test
      - name: Run the app
        id: run-app
        run: |
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5

  deploy-to-render:
    runs-on: ubuntu-latest # Define the operating system for the job
    needs: run-tests
    if: ${{ needs.run-unit-tests.result == 'success' }} # Condition to run the job only if run-unit-tests job succeeds
    steps:
      - name: Trigger Render deployment webhook #trigger deployment webhook
        run: curl -X GET -d '{}' ${{ secrets.RENDER_DEPLOY_HOOK }}

  send-slack-notification:
    runs-on: ubuntu-latest
    needs: [run-tests, deploy-to-render]
    if: ${{ always() }}
    steps:
      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        with:
          status: ${{ job.status }}
          mention: "here"
          author_name: "GitHub Actions"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_HOOK }}
